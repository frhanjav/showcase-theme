import { Hono } from 'hono';
import { serveStatic } from 'hono/cloudflare-workers';
import { Env } from './types';
import { corsMiddleware, securityHeaders, errorHandler, rateLimitMiddleware, authMiddleware, csrfMiddleware } from './middleware';
import auth from './routes/auth';
import youtubers from './routes/youtubers';
import videos from './routes/videos';
import utils from './routes/utils';

const app = new Hono<{ Bindings: Env }>();

// Global middleware
app.use('*', errorHandler());
app.use('*', async (c, next) => {
  const corsOrigins = c.env.CORS_ORIGINS || 'http://localhost:8787';
  return corsMiddleware(corsOrigins)(c, next);
});
app.use('*', securityHeaders());
app.use('/api/*', rateLimitMiddleware());
app.use('/api/*', csrfMiddleware());
app.use('/api/*', authMiddleware());

// API routes
app.route('/api', auth);
app.route('/api/youtubers', youtubers);
app.route('/api/videos', videos);
app.route('/api', utils);

// Serve static files
app.use('/static/*', serveStatic({ root: './public' }));

// Serve HTML pages
app.get('/', serveStatic({ path: './public/index.html' }));
app.get('/youtubers', serveStatic({ path: './public/youtubers.html' }));
app.get('/videos', serveStatic({ path: './public/videos.html' }));

export default app;
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Showcase</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        :root {
            --bg-color: #ffffff; --text-color: #333333; --card-bg: #f8f9fa;
            --border-color: #e1e5e9; --accent-color: #007bff; --hover-color: #f1f3f4;
        }
        [data-theme="dark"] {
            --bg-color: #1a1a1a; --text-color: #ffffff; --card-bg: #2d2d2d;
            --border-color: #404040; --accent-color: #4285f4; --hover-color: #3a3a3a;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: var(--bg-color); color: var(--text-color); line-height: 1.6;
            transition: all 0.3s ease;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
        .header { text-align: center; margin-bottom: 3rem; }
        .header h1 { font-size: 2.5rem; margin-bottom: 1rem; font-weight: 700; }
        .header p { font-size: 1.1rem; opacity: 0.8; margin-bottom: 2rem; }
        .theme-toggle {
            position: fixed; top: 2rem; right: 2rem; background: var(--card-bg);
            border: 1px solid var(--border-color); border-radius: 50px;
            padding: 0.5rem 1rem; cursor: pointer; transition: all 0.3s ease; z-index: 1000;
        }
        .theme-toggle:hover { background: var(--hover-color); }
        .nav-buttons { display: flex; gap: 1rem; justify-content: center; margin-bottom: 2rem; }
        .nav-button {
            background: var(--accent-color); color: white; border: none;
            padding: 1rem 2rem; border-radius: 8px; font-size: 1.1rem;
            font-weight: 600; cursor: pointer; transition: all 0.3s ease;
            text-decoration: none; display: inline-block;
        }
        .nav-button:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3); }
        .admin-section {
            background: var(--card-bg); border: 1px solid var(--border-color);
            border-radius: 12px; padding: 2rem; margin-top: 3rem;
        }
        .admin-section h2 { margin-bottom: 1rem; font-size: 1.5rem; }
        .login-form { display: flex; gap: 1rem; margin-bottom: 1rem; }
        .login-form input {
            flex: 1; padding: 0.75rem; border: 1px solid var(--border-color);
            border-radius: 6px; background: var(--bg-color); color: var(--text-color); font-size: 1rem;
        }
        .login-form button {
            background: var(--accent-color); color: white; border: none;
            padding: 0.75rem 1.5rem; border-radius: 6px; cursor: pointer;
            font-size: 1rem; font-weight: 600;
        }
        .login-form button:hover { opacity: 0.9; }
        .login-form button:disabled { opacity: 0.5; cursor: not-allowed; }
        .status-message { padding: 0.75rem; border-radius: 6px; margin-top: 1rem; }
        .status-success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .status-error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        @media (max-width: 768px) {
            .container { padding: 1rem; }
            .header h1 { font-size: 2rem; }
            .nav-buttons { flex-direction: column; align-items: center; }
            .nav-button { width: 100%; max-width: 300px; }
            .login-form { flex-direction: column; }
            .theme-toggle { top: 1rem; right: 1rem; }
        }
    </style>
</head>
<body>
    <button class="theme-toggle" onclick="toggleTheme()">ðŸŒ“</button>
    <div class="container">
        <div class="header">
            <h1>YouTube Showcase</h1>
            <p>Discover amazing YouTubers and their best videos</p>
        </div>
        <div class="nav-buttons">
            <a href="/youtubers" class="nav-button">View YouTubers</a>
            <a href="/videos" class="nav-button">View Videos</a>
        </div>
        <div class="admin-section">
            <h2>Admin Panel</h2>
            <p>Login to manage content</p>
            <div class="login-form">
                <input type="password" id="password" placeholder="Admin Password" />
                <button onclick="login()" id="loginBtn">Login</button>
            </div>
            <div id="statusMessage"></div>
        </div>
    </div>
    <script>
        function toggleTheme() {
            const current = document.documentElement.getAttribute('data-theme');
            const newTheme = current === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        }
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
        
        async function getCSRFToken() {
            try {
                const response = await fetch('/api/csrf-token');
                const data = await response.json();
                return data.csrf_token;
            } catch (error) {
                console.error('Error getting CSRF token:', error);
                return null;
            }
        }
        
        async function login() {
            const password = document.getElementById('password').value;
            const loginBtn = document.getElementById('loginBtn');
            if (!password) {
                showStatus('Please enter a password', 'error');
                return;
            }
            loginBtn.disabled = true;
            loginBtn.textContent = 'Logging in...';
            try {
                const csrfToken = await getCSRFToken();
                if (!csrfToken) throw new Error('Failed to get CSRF token');
                const response = await fetch('/api/auth', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ password, csrf_token: csrfToken })
                });
                const data = await response.json();
                if (data.success) {
                    localStorage.setItem('authToken', data.token);
                    showStatus('Login successful!', 'success');
                    document.getElementById('password').value = '';
                    setTimeout(() => { window.location.href = '/youtubers'; }, 1000);
                } else {
                    showStatus(data.error || 'Login failed', 'error');
                }
            } catch (error) {
                console.error('Login error:', error);
                showStatus('Login failed. Please try again.', 'error');
            } finally {
                loginBtn.disabled = false;
                loginBtn.textContent = 'Login';
            }
        }
        
        function showStatus(message, type) {
            const statusMessage = document.getElementById('statusMessage');
            statusMessage.textContent = message;
            statusMessage.className = 'status-message status-' + type;
        }
        
        document.getElementById('password').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') login();
        });
    </script>
</body>
</html>`;
  return c.html(html);
});

// YouTubers page
app.get('/youtubers', (c) => {
  return c.html(`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTubers - YouTube Showcase</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-color: #ffffff;
            --text-color: #333333;
            --card-bg: #f8f9fa;
            --border-color: #e1e5e9;
            --accent-color: #007bff;
            --hover-color: #f1f3f4;
            --success-color: #28a745;
            --danger-color: #dc3545;
        }

        [data-theme="dark"] {
            --bg-color: #1a1a1a;
            --text-color: #ffffff;
            --card-bg: #2d2d2d;
            --border-color: #404040;
            --accent-color: #4285f4;
            --hover-color: #3a3a3a;
            --success-color: #4caf50;
            --danger-color: #f44336;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            transition: all 0.3s ease;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .header h1 {
            font-size: 2rem;
            font-weight: 700;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .theme-toggle {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 50px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .theme-toggle:hover {
            background: var(--hover-color);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background: var(--accent-color);
            color: white;
        }

        .btn-success {
            background: var(--success-color);
            color: white;
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .youtubers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .youtuber-card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
        }

        .youtuber-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .youtuber-image {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 1rem;
            border: 3px solid var(--border-color);
        }

        .youtuber-name {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .youtuber-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .tag {
            background: var(--accent-color);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .card-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: var(--bg-color);
            border-radius: 12px;
            padding: 2rem;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-color);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            background: var(--bg-color);
            color: var(--text-color);
            font-size: 1rem;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        }

        .image-preview {
            max-width: 100%;
            max-height: 200px;
            border-radius: 6px;
            margin-top: 0.5rem;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .status-message {
            padding: 0.75rem;
            border-radius: 6px;
            margin-bottom: 1rem;
        }

        .status-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: var(--text-color);
            opacity: 0.7;
        }

        .empty-state h3 {
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .header {
                flex-direction: column;
                align-items: stretch;
            }

            .header-actions {
                justify-content: space-between;
            }

            .youtubers-grid {
                grid-template-columns: 1fr;
            }

            .modal-content {
                margin: 1rem;
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>YouTubers</h1>
            <div class="header-actions">
                <button class="theme-toggle" onclick="toggleTheme()">ðŸŒ“</button>
                <a href="/" class="btn btn-primary">Home</a>
                <a href="/videos" class="btn btn-primary">Videos</a>
                <button class="btn btn-success" onclick="showAddModal()" id="addBtn">Add YouTuber</button>
            </div>
        </div>

        <div id="statusMessage"></div>
        
        <div id="youtubersGrid" class="youtubers-grid">
            <!-- YouTubers will be loaded here -->
        </div>

        <div id="loadingState" class="empty-state">
            <h3>Loading YouTubers...</h3>
        </div>
    </div>

    <!-- Add/Edit Modal -->
    <div id="youtuberModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Add YouTuber</h2>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            
            <form id="youtuberForm" enctype="multipart/form-data">
                <div class="form-group">
                    <label class="form-label" for="name">Name *</label>
                    <input type="text" id="name" class="form-input" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="tags">Tags (comma-separated)</label>
                    <input type="text" id="tags" class="form-input" placeholder="gaming, tech, 1M+">
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="image">Profile Image</label>
                    <input type="file" id="image" class="form-input" accept="image/*">
                    <img id="imagePreview" class="image-preview" style="display: none;">
                </div>
                
                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button type="submit" class="btn btn-success" id="saveBtn">Save</button>
                    <button type="button" class="btn btn-primary" onclick="closeModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let youtubers = [];
        let editingId = null;
        let authToken = localStorage.getItem('authToken');

        // Theme management
        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        }

        // Load saved theme
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);

        // Check authentication and show/hide admin controls
        function checkAuth() {
            const isAuthenticated = !!authToken;
            document.getElementById('addBtn').style.display = isAuthenticated ? 'block' : 'none';
            
            // Hide/show edit/delete buttons on cards
            document.querySelectorAll('.card-actions').forEach(actions => {
                actions.style.display = isAuthenticated ? 'flex' : 'none';
            });
        }

        // Load YouTubers
        async function loadYouTubers() {
            try {
                const response = await fetch('/api/youtubers');
                const data = await response.json();
                
                if (data.youtubers) {
                    youtubers = data.youtubers;
                    renderYouTubers();
                } else {
                    showStatus('Failed to load YouTubers', 'error');
                }
            } catch (error) {
                console.error('Error loading YouTubers:', error);
                showStatus('Failed to load YouTubers', 'error');
            } finally {
                document.getElementById('loadingState').style.display = 'none';
            }
        }

        // Render YouTubers
        function renderYouTubers() {
            const grid = document.getElementById('youtubersGrid');
            
            if (youtubers.length === 0) {
                grid.innerHTML = '<div class="empty-state"><h3>No YouTubers found</h3><p>Add some YouTubers to get started!</p></div>';
                return;
            }

            const isAuthenticated = !!authToken;
            
            grid.innerHTML = youtubers.map(youtuber => 
                '<div class="youtuber-card">' +
                    '<img src="' + (youtuber.image_url || 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 80 80"><circle cx="40" cy="40" r="40" fill="%23ddd"/><text x="40" y="45" text-anchor="middle" font-size="16" fill="%23999">' + youtuber.name.charAt(0) + '</text></svg>') + '" alt="' + youtuber.name + '" class="youtuber-image">' +
                    '<h3 class="youtuber-name">' + youtuber.name + '</h3>' +
                    '<div class="youtuber-tags">' +
                        youtuber.tags.map(tag => '<span class="tag">' + tag + '</span>').join('') +
                    '</div>' +
                    '<div class="card-actions" style="display: ' + (isAuthenticated ? 'flex' : 'none') + '">' +
                        '<button class="btn btn-primary" onclick="editYouTuber(' + youtuber.youtuber_id + ')">Edit</button>' +
                        '<button class="btn btn-danger" onclick="deleteYouTuber(' + youtuber.youtuber_id + ')">Delete</button>' +
                    '</div>' +
                '</div>'
            ).join('');
        }

        // Show add modal
        function showAddModal() {
            if (!authToken) {
                showStatus('Please login first', 'error');
                return;
            }
            
            editingId = null;
            document.getElementById('modalTitle').textContent = 'Add YouTuber';
            document.getElementById('youtuberForm').reset();
            document.getElementById('imagePreview').style.display = 'none';
            document.getElementById('youtuberModal').classList.add('show');
        }

        // Edit YouTuber
        function editYouTuber(id) {
            if (!authToken) {
                showStatus('Please login first', 'error');
                return;
            }

            const youtuber = youtubers.find(y => y.youtuber_id === id);
            if (!youtuber) return;

            editingId = id;
            document.getElementById('modalTitle').textContent = 'Edit YouTuber';
            document.getElementById('name').value = youtuber.name;
            document.getElementById('tags').value = youtuber.tags.join(', ');
            
            const preview = document.getElementById('imagePreview');
            if (youtuber.image_url) {
                preview.src = youtuber.image_url;
                preview.style.display = 'block';
            } else {
                preview.style.display = 'none';
            }
            
            document.getElementById('youtuberModal').classList.add('show');
        }

        // Delete YouTuber
        async function deleteYouTuber(id) {
            if (!authToken) {
                showStatus('Please login first', 'error');
                return;
            }

            if (!confirm('Are you sure you want to delete this YouTuber?')) {
                return;
            }

            try {
                const response = await fetch(`/api/youtubers/\${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer \${authToken}`,
                        'X-CSRF-Token': authToken
                    }
                });

                const data = await response.json();

                if (data.success) {
                    showStatus('YouTuber deleted successfully', 'success');
                    loadYouTubers();
                } else {
                    showStatus(data.error || 'Failed to delete YouTuber', 'error');
                }
            } catch (error) {
                console.error('Error deleting YouTuber:', error);
                showStatus('Failed to delete YouTuber', 'error');
            }
        }

        // Close modal
        function closeModal() {
            document.getElementById('youtuberModal').classList.remove('show');
        }

        // Handle form submission
        document.getElementById('youtuberForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!authToken) {
                showStatus('Please login first', 'error');
                return;
            }

            const saveBtn = document.getElementById('saveBtn');
            const originalText = saveBtn.textContent;
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const formData = new FormData();
                formData.append('name', document.getElementById('name').value);
                formData.append('tags', document.getElementById('tags').value);
                
                const imageFile = document.getElementById('image').files[0];
                if (imageFile) {
                    formData.append('image', imageFile);
                }

                const url = editingId ? `/api/youtubers/\${editingId}` : '/api/youtubers';
                const method = editingId ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method,
                    headers: {
                        'Authorization': `Bearer \${authToken}`,
                        'X-CSRF-Token': authToken
                    },
                    body: formData
                });

                const data = await response.json();

                if (data.youtuber) {
                    showStatus(`YouTuber \${editingId ? 'updated' : 'created'} successfully`, 'success');
                    closeModal();
                    loadYouTubers();
                } else {
                    showStatus(data.error || `Failed to \${editingId ? 'update' : 'create'} YouTuber`, 'error');
                }
            } catch (error) {
                console.error('Error saving YouTuber:', error);
                showStatus('Failed to save YouTuber', 'error');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = originalText;
            }
        });

        // Image preview
        document.getElementById('image').addEventListener('change', (e) => {
            const file = e.target.files[0];
            const preview = document.getElementById('imagePreview');
            
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                preview.style.display = 'none';
            }
        });

        // Status message
        function showStatus(message, type) {
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = message;
            statusElement.className = `status-message status-\${type}`;
            
            setTimeout(() => {
                statusElement.textContent = '';
                statusElement.className = '';
            }, 5000);
        }

        // Initialize
        checkAuth();
        loadYouTubers();

        // Close modal when clicking outside
        document.getElementById('youtuberModal').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                closeModal();
            }
        });
    </script>
</body>
</html>
  `);
});

// Videos page - similar structure to YouTubers page
app.get('/videos', (c) => {
  return c.html(`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Videos - YouTube Showcase</title>
    <style>
        /* Reuse the same styles as YouTubers page with minor modifications */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-color: #ffffff;
            --text-color: #333333;
            --card-bg: #f8f9fa;
            --border-color: #e1e5e9;
            --accent-color: #007bff;
            --hover-color: #f1f3f4;
            --success-color: #28a745;
            --danger-color: #dc3545;
        }

        [data-theme="dark"] {
            --bg-color: #1a1a1a;
            --text-color: #ffffff;
            --card-bg: #2d2d2d;
            --border-color: #404040;
            --accent-color: #4285f4;
            --hover-color: #3a3a3a;
            --success-color: #4caf50;
            --danger-color: #f44336;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            transition: all 0.3s ease;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .header h1 {
            font-size: 2rem;
            font-weight: 700;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .theme-toggle {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 50px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .theme-toggle:hover {
            background: var(--hover-color);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background: var(--accent-color);
            color: white;
        }

        .btn-success {
            background: var(--success-color);
            color: white;
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .videos-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .video-card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
        }

        .video-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .video-thumbnail {
            width: 100%;
            height: 200px;
            object-fit: cover;
            cursor: pointer;
        }

        .video-content {
            padding: 1.5rem;
        }

        .video-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            line-height: 1.4;
        }

        .video-description {
            color: var(--text-color);
            opacity: 0.8;
            margin-bottom: 1rem;
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .video-url {
            font-size: 0.9rem;
            color: var(--accent-color);
            text-decoration: none;
            margin-bottom: 1rem;
            display: block;
            word-break: break-all;
        }

        .video-url:hover {
            text-decoration: underline;
        }

        .card-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: var(--bg-color);
            border-radius: 12px;
            padding: 2rem;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-color);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .form-input, .form-textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            background: var(--bg-color);
            color: var(--text-color);
            font-size: 1rem;
            font-family: inherit;
        }

        .form-textarea {
            resize: vertical;
            min-height: 80px;
        }

        .form-input:focus, .form-textarea:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        }

        .image-preview {
            max-width: 100%;
            max-height: 200px;
            border-radius: 6px;
            margin-top: 0.5rem;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .status-message {
            padding: 0.75rem;
            border-radius: 6px;
            margin-bottom: 1rem;
        }

        .status-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: var(--text-color);
            opacity: 0.7;
        }

        .empty-state h3 {
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .header {
                flex-direction: column;
                align-items: stretch;
            }

            .header-actions {
                justify-content: space-between;
            }

            .videos-grid {
                grid-template-columns: 1fr;
            }

            .modal-content {
                margin: 1rem;
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Videos</h1>
            <div class="header-actions">
                <button class="theme-toggle" onclick="toggleTheme()">ðŸŒ“</button>
                <a href="/" class="btn btn-primary">Home</a>
                <a href="/youtubers" class="btn btn-primary">YouTubers</a>
                <button class="btn btn-success" onclick="showAddModal()" id="addBtn">Add Video</button>
            </div>
        </div>

        <div id="statusMessage"></div>
        
        <div id="videosGrid" class="videos-grid">
            <!-- Videos will be loaded here -->
        </div>

        <div id="loadingState" class="empty-state">
            <h3>Loading Videos...</h3>
        </div>
    </div>

    <!-- Add/Edit Modal -->
    <div id="videoModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Add Video</h2>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            
            <form id="videoForm" enctype="multipart/form-data">
                <div class="form-group">
                    <label class="form-label" for="url">Video URL *</label>
                    <input type="url" id="url" class="form-input" required placeholder="https://youtube.com/watch?v=...">
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="title">Title</label>
                    <input type="text" id="title" class="form-input" placeholder="Auto-extracted from URL if empty">
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="description">Description</label>
                    <textarea id="description" class="form-textarea" placeholder="Auto-extracted from URL if empty"></textarea>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="custom_thumbnail">Custom Thumbnail</label>
                    <input type="file" id="custom_thumbnail" class="form-input" accept="image/*">
                    <small style="opacity: 0.7;">Leave empty to auto-extract from URL</small>
                    <img id="thumbnailPreview" class="image-preview" style="display: none;">
                </div>
                
                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button type="submit" class="btn btn-success" id="saveBtn">Save</button>
                    <button type="button" class="btn btn-primary" onclick="closeModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let videos = [];
        let editingId = null;
        let authToken = localStorage.getItem('authToken');

        // Theme management
        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        }

        // Load saved theme
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);

        // Check authentication and show/hide admin controls
        function checkAuth() {
            const isAuthenticated = !!authToken;
            document.getElementById('addBtn').style.display = isAuthenticated ? 'block' : 'none';
            
            // Hide/show edit/delete buttons on cards
            document.querySelectorAll('.card-actions').forEach(actions => {
                actions.style.display = isAuthenticated ? 'flex' : 'none';
            });
        }

        // Load Videos
        async function loadVideos() {
            try {
                const response = await fetch('/api/videos');
                const data = await response.json();
                
                if (data.videos) {
                    videos = data.videos;
                    renderVideos();
                } else {
                    showStatus('Failed to load videos', 'error');
                }
            } catch (error) {
                console.error('Error loading videos:', error);
                showStatus('Failed to load videos', 'error');
            } finally {
                document.getElementById('loadingState').style.display = 'none';
            }
        }

        // Render Videos
        function renderVideos() {
            const grid = document.getElementById('videosGrid');
            
            if (videos.length === 0) {
                grid.innerHTML = '<div class="empty-state"><h3>No videos found</h3><p>Add some videos to get started!</p></div>';
                return;
            }

            const isAuthenticated = !!authToken;
            
            grid.innerHTML = videos.map(video => `
                <div class="video-card">
                    <img src="\${video.thumbnail_url || 'data:image/svg+xml,<svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"350\\" height=\\"200\\" viewBox=\\"0 0 350 200\\"><rect width=\\"350\\" height=\\"200\\" fill=\\"\\%23ddd\\"/><text x=\\"175\\" y=\\"100\\" text-anchor=\\"middle\\" font-size=\\"16\\" fill=\\"\\%23999\\">No Thumbnail</text></svg>'}" alt="\${video.title}" class="video-thumbnail" onclick="window.open('\${video.url}', '_blank')">
                    <div class="video-content">
                        <h3 class="video-title">\${video.title}</h3>
                        \${video.description ? `<p class="video-description">\${video.description}</p>` : ''}
                        <a href="\${video.url}" target="_blank" class="video-url">\${video.url}</a>
                        <div class="card-actions" style="display: \${isAuthenticated ? 'flex' : 'none'}">
                            <button class="btn btn-primary" onclick="editVideo(\${video.video_id})">Edit</button>
                            <button class="btn btn-danger" onclick="deleteVideo(\${video.video_id})">Delete</button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Show add modal
        function showAddModal() {
            if (!authToken) {
                showStatus('Please login first', 'error');
                return;
            }
            
            editingId = null;
            document.getElementById('modalTitle').textContent = 'Add Video';
            document.getElementById('videoForm').reset();
            document.getElementById('thumbnailPreview').style.display = 'none';
            document.getElementById('videoModal').classList.add('show');
        }

        // Edit Video
        function editVideo(id) {
            if (!authToken) {
                showStatus('Please login first', 'error');
                return;
            }

            const video = videos.find(v => v.video_id === id);
            if (!video) return;

            editingId = id;
            document.getElementById('modalTitle').textContent = 'Edit Video';
            document.getElementById('url').value = video.url;
            document.getElementById('title').value = video.title;
            document.getElementById('description').value = video.description || '';
            
            const preview = document.getElementById('thumbnailPreview');
            if (video.thumbnail_url) {
                preview.src = video.thumbnail_url;
                preview.style.display = 'block';
            } else {
                preview.style.display = 'none';
            }
            
            document.getElementById('videoModal').classList.add('show');
        }

        // Delete Video
        async function deleteVideo(id) {
            if (!authToken) {
                showStatus('Please login first', 'error');
                return;
            }

            if (!confirm('Are you sure you want to delete this video?')) {
                return;
            }

            try {
                const response = await fetch(`/api/videos/\${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer \${authToken}`,
                        'X-CSRF-Token': authToken
                    }
                });

                const data = await response.json();

                if (data.success) {
                    showStatus('Video deleted successfully', 'success');
                    loadVideos();
                } else {
                    showStatus(data.error || 'Failed to delete video', 'error');
                }
            } catch (error) {
                console.error('Error deleting video:', error);
                showStatus('Failed to delete video', 'error');
            }
        }

        // Close modal
        function closeModal() {
            document.getElementById('videoModal').classList.remove('show');
        }

        // Handle form submission
        document.getElementById('videoForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!authToken) {
                showStatus('Please login first', 'error');
                return;
            }

            const saveBtn = document.getElementById('saveBtn');
            const originalText = saveBtn.textContent;
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const formData = new FormData();
                formData.append('url', document.getElementById('url').value);
                formData.append('title', document.getElementById('title').value);
                formData.append('description', document.getElementById('description').value);
                
                const thumbnailFile = document.getElementById('custom_thumbnail').files[0];
                if (thumbnailFile) {
                    formData.append('custom_thumbnail', thumbnailFile);
                }

                const url = editingId ? `/api/videos/\${editingId}` : '/api/videos';
                const method = editingId ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method,
                    headers: {
                        'Authorization': `Bearer \${authToken}`,
                        'X-CSRF-Token': authToken
                    },
                    body: formData
                });

                const data = await response.json();

                if (data.video) {
                    showStatus(`Video \${editingId ? 'updated' : 'created'} successfully`, 'success');
                    closeModal();
                    loadVideos();
                } else {
                    showStatus(data.error || `Failed to \${editingId ? 'update' : 'create'} video`, 'error');
                }
            } catch (error) {
                console.error('Error saving video:', error);
                showStatus('Failed to save video', 'error');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = originalText;
            }
        });

        // Thumbnail preview
        document.getElementById('custom_thumbnail').addEventListener('change', (e) => {
            const file = e.target.files[0];
            const preview = document.getElementById('thumbnailPreview');
            
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                preview.style.display = 'none';
            }
        });

        // Status message
        function showStatus(message, type) {
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = message;
            statusElement.className = `status-message status-\${type}`;
            
            setTimeout(() => {
                statusElement.textContent = '';
                statusElement.className = '';
            }, 5000);
        }

        // Initialize
        checkAuth();
        loadVideos();

        // Close modal when clicking outside
        document.getElementById('videoModal').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                closeModal();
            }
        });
    </script>
</body>
</html>
  `);
});

export default app;
